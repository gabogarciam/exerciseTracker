{"version":3,"sources":["components/Navbar/MenuItems.js","components/Navbar/Navbar.js","components/CreateExercise/CreateExercise.js","components/CreateUser/CreateUser.js","components/EditExercise/EditExercise.js","components/ExerciseList/ExerciseList.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["MenuItems","title","url","cName","Navbar","handleClick","setState","clicked","state","className","to","onClick","this","map","item","index","key","Component","CreateExercise","CreateUser","EditExercise","ExerciseList","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6WAAaA,EAAY,CACrB,CACIC,MAAO,OACPC,IAAK,IACLC,MAAO,aAEX,CACIF,MAAO,gBACPC,IAAK,iBACLC,MAAO,aAEX,CACIF,MAAO,kBACPC,IAAK,mBACLC,MAAO,aAEX,CACIF,MAAO,cACPC,IAAK,eACLC,MAAO,cCwBAC,G,wDArCX,aAAe,IAAD,8BACV,gBAMJC,YAAc,WACV,EAAKC,SAAS,CACVC,SAAU,EAAKC,MAAMD,WANzB,EAAKC,MAAQ,CACTD,SAAS,GAJH,E,qDAaJ,IAAD,OACL,OACI,yBAAKE,UAAU,eACX,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,eACnB,yBAAKA,UAAU,eACf,wBAAIA,UAAU,aAAd,oBAEJ,yBAAKA,UAAU,YAAYE,QAASC,KAAKP,aACrC,yBAAKI,UAAS,sBAAiBG,KAAKJ,MAAMD,QAAU,aAAe,gBAEvE,wBAAIE,UAAWG,KAAKJ,MAAMD,QAAU,kBAAoB,YACnDP,EAAUa,KAAI,SAACC,EAAMC,GAClB,OACI,wBAAIN,UAAU,cAAcO,IAAKD,GAC7B,kBAAC,IAAD,CAAMN,UAAWK,EAAKX,MAAOO,GAAII,EAAKZ,IAAKS,QAAS,EAAKN,aAAcS,EAAKb,iB,GA5BvFgB,cCOLC,E,uKARR,OACI,0E,GAHkBD,aCWdE,E,uKATP,OACG,uE,GAHcF,aCWVG,E,uKATR,OACI,yE,GAHgBH,aCYZI,G,6KATP,OACG,wE,GAHgBJ,cCUZK,G,6KARR,OACI,gF,GAHQL,cCuBLM,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKd,UAAU,aACb,kBAAC,IAAD,CAAOe,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,iBAAiBE,UAAWL,IACxC,kBAAC,IAAD,CAAOG,KAAK,YAAYE,UAAWN,IACnC,kBAAC,IAAD,CAAOI,KAAK,mBAAmBE,UAAWR,IAC1C,kBAAC,IAAD,CAAOM,KAAK,eAAeE,UAAWP,OCR1BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e53e9d5.chunk.js","sourcesContent":["export const MenuItems = [\n    {\n        title: 'Home',\n        url: '/',\n        cName: 'nav-links'\n    },\n    {\n        title: 'Exercise List',\n        url: '/all-exercises',\n        cName: 'nav-links'\n    },\n    {\n        title: 'Create Exercise',\n        url: '/create-exercise',\n        cName: 'nav-links'\n    },\n    {\n        title: 'Create User',\n        url: '/create-user',\n        cName: 'nav-links'\n    }\n]","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MenuItems } from './MenuItems'\nimport './Navbar.css';\n\nclass Navbar extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            clicked: false\n        }\n    }\n    handleClick = () => {\n        this.setState({\n            clicked: !this.state.clicked\n        })\n    }\n\n    render() {\n        return (\n            <nav className=\"NavbarItems\">\n                <Link to='/' className='navbar-logo'>\n                    <div className='image-logo'></div>\n                    <h3 className='nav-title'>ExerciseTracker</h3>\n                </Link>\n                <div className='menu-icon' onClick={this.handleClick}>\n                    <div className={`menu-burger ${this.state.clicked ? 'menu-times' : 'menu-bars'}`}></div>\n                </div>\n                <ul className={this.state.clicked ? 'nav-menu active' : 'nav-menu'}>\n                    {MenuItems.map((item, index) => {\n                        return (\n                            <li className='navbar-item' key={index}>\n                                <Link className={item.cName} to={item.url} onClick={this.handleClick}>{item.title}</Link>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\n class CreateExercise extends Component {\n    render() {\n        return (\n            <div>\n                This is a CreateExercise Component!!!\n            </div>\n        )\n    }  \n }\n\n export default CreateExercise;","import React, { Component } from 'react';\n\n class CreateUser extends Component {\n     render() {\n         return (\n            <div>\n                This is a Create User Component!!!\n            </div>\n        )\n    }\n     \n }\n\n export default CreateUser;","import React, { Component } from 'react';\n\n class EditExercise extends Component {\n    render() { \n        return (\n            <div>\n                This is a Edit Exercise Component!!!\n            </div>\n        )\n    }\n     \n }\n\n export default EditExercise;","import React, { Component } from 'react';\nimport './ExerciseList.css'\n\n class ExerciseList extends Component {\n     render() { \n         return (\n            <div>\n                This is a ExerciseList Component!!!\n            </div>\n        )\n    }\n     \n }\n\n export default ExerciseList;","import React, { Component } from 'react';\nimport './Home.css'\n\n class Home extends Component {\n     render() {\n        return (\n            <div>\n                Hi there, this is a Exercise Tracker App!!!\n            </div>\n        )\n     }\n }\n\n export default Home;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Navbar from './components/Navbar/Navbar';\nimport CreateExercise from './components/CreateExercise/CreateExercise';\nimport CreateUser from './components/CreateUser/CreateUser';\nimport EditExercise from './components/EditExercise/EditExercise';\nimport ExerciseList from './components/ExerciseList/ExerciseList';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className='container'>\n        <Route path='/' exact component={Home} />\n        <Route path='/all-exercises' component={ExerciseList} />\n        <Route path='/edit/:id' component={EditExercise} />\n        <Route path='/create-exercise' component={CreateExercise} />\n        <Route path='/create-user' component={CreateUser} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}